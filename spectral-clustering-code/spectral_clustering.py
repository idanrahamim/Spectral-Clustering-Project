"""This module contains functions for performing spectral clustering method on data (points)"""
from graph_algorithms import *
from kmeans_pp import kmeans_pp


def spectral_clustering(A, Q, max_iter, k):
    """
    Performs a spectral clustering method on matrices generated from set of points to cluster. Receives matrix Q and
    eigenvalues matrix A generated from set of points by graph laplacian matrix used in QR iteration algorithm.
    (This method declaration aims to avoid double computation of matrices A and Q in other functions of the project)

    :param A (numpy.ndarray) eigenvalues matrix generated by QR iteration algorithm
    :param Q (numpy.ndarray) eigenvectors matrix generated by QR iteration algorithm
    :param max_iter (int) maximum number of iterations that will be used in k-means method
    :param k (int) number of clusters to generate
    :return numpy ndarray of size n (number of points) of clusters
    """
    n = len(Q)
    # Get sorted indices of diagonal (eigenvalues)
    diag_ind = np.argsort(A.diagonal())
    # Rearrange columns of Q
    eigenvectors = Q[:, diag_ind]
    # Return k eigenvectors corresponding to k eigenvalues
    T = eigenvectors[:, :k]
    # Normalize row vectors
    T = T / np.linalg.norm(T, axis=1).reshape(n, 1)
    return kmeans_pp(k, n, k, max_iter, T)
